{
  "version": 3,
  "sources": ["../../../../src/extensions/fixtures/fixtures_loader.js"],
  "sourcesContent": ["'use strict'\n\n/**\n * @module extensions/fixtures/FixturesLoader\n */\n\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport fastGlob from 'fast-glob'\nimport { pathToFileURL } from 'url'\nimport yaml from 'js-yaml'\n\n/**\n * Fixtures loader extension.\n *\n * @class\n */\nclass FixturesLoader {\n    /**\n     * @param {string} [fixturesDir='fixtures'] - The name of the fixtures directory relative to feature\n     */\n    constructor({ fixturesDir } = { fixturesDir: 'fixtures' }) {\n        this.fixturesDir = fixturesDir\n        this.featureUri = undefined\n    }\n\n    /**\n     * Configures the loader\n     *\n     * @param {string} [fixturesDir='fixtures'] - The name of the fixtures directory relative to feature\n     */\n    configure({ fixturesDir } = { fixturesDir: 'fixtures' }) {\n        this.fixturesDir = fixturesDir\n    }\n\n    /**\n     * Sets feature uri, used to resolve fixtures files.\n     * When trying to load a fixture file the path will be comprised of:\n     * - feature uri\n     * - fixturesDir\n     * - fixture name\n     *\n     * @param {string} featureUri - Feature uri\n     */\n    setFeatureUri(featureUri) {\n        this.featureUri = featureUri\n    }\n\n    /**\n     * Loads content from file.\n     *\n     * @param {string} file - File path\n     * @return {Promise.<string>} File content\n     */\n    loadText(file) {\n        return new Promise((resolve, reject) => {\n            fs.readFile(file, (err, data) => {\n                if (err) return reject(err)\n                resolve(data.toString('utf8'))\n            })\n        })\n    }\n\n    /**\n     * Loads content from yaml file.\n     *\n     * @param {string} file - File path\n     * @return {Promise.<Object|Array>} Parsed yaml data\n     */\n    loadYaml(file) {\n        return this.loadText(file).then((content) => {\n            try {\n                const data = yaml.load(content)\n                if (data === undefined) {\n                    return Promise.reject(\n                        new Error(\n                            `Fixture file is invalid, yaml parsing resulted in undefined data for file: ${file}`,\n                        ),\n                    )\n                }\n\n                return data\n            } catch (err) {\n                return Promise.reject(\n                    new Error(`Unable to parse yaml fixture file: ${file}.\\nerror: ${err.message}`),\n                )\n            }\n        })\n    }\n\n    /**\n     * Loads content from json file.\n     *\n     * @param {string} file - File path\n     * @return {Promise.<Object>} Json data\n     */\n    loadJson(file) {\n        return this.loadText(file).then((content) => {\n            try {\n                const data = JSON.parse(content)\n\n                return data\n            } catch (err) {\n                return Promise.reject(\n                    new Error(`Unable to parse json fixture file: ${file}.\\nerror: ${err.message}`),\n                )\n            }\n        })\n    }\n\n    /**\n     * Loads content from javascript module.\n     *\n     * @param {string} file - File path\n     * @return {Promise.<*>} Data generated from the module\n     */\n    loadModule(file) {\n        const moduleURL = pathToFileURL(path.resolve(file)).href\n\n        return import(moduleURL)\n            .then((mod) => {\n                if (typeof mod.default !== 'function') {\n                    return Promise.reject(\n                        new Error(\n                            [\n                                `JavaScript fixture file should export default function.\\n`,\n                                `Make sure you declared 'export default function' in ${file}`,\n                            ].join(''),\n                        ),\n                    )\n                }\n\n                return mod.default()\n            })\n            .catch((err) => {\n                return Promise.reject(\n                    new Error(\n                        `An error occurred while loading fixture file: ${file}\\nerror: ${err.message}`,\n                    ),\n                )\n            })\n    }\n\n    /**\n     * Tries to load a fixture from current feature directory.\n     * Will search for the following file extensions:\n     * - yaml\n     * - yml\n     * - js\n     * - json\n     * - txt\n     *\n     * @param {string} fixture - Fixture file name without extension\n     * @return {Promise.<Object|string>} Fixture content\n     */\n    load(fixture) {\n        if (this.featureUri === undefined)\n            return Promise.reject(\n                new Error(`Cannot load fixture: ${fixture}, no feature uri defined`),\n            )\n\n        const featureDir = path.dirname(this.featureUri)\n        const pattern = `${featureDir}/${this.fixturesDir}/${fixture}.@(yaml|yml|js|json|txt)`\n\n        return new Promise((resolve, reject) => {\n            const files = fastGlob.sync(pattern)\n            const fixturesCount = files.length\n\n            if (fixturesCount === 0)\n                return reject(new Error(`No fixture found for: ${fixture} (${pattern})`))\n            if (fixturesCount > 1) {\n                return reject(\n                    new Error(\n                        [\n                            `Found ${fixturesCount} matching fixture files, `,\n                            `you should have only one matching '${fixture}', matches:\\n  `,\n                            `- ${files.join('\\n  - ')}`,\n                        ].join(''),\n                    ),\n                )\n            }\n\n            const fixtureFile = files[0]\n            const ext = path.extname(fixtureFile).substring(1)\n\n            switch (ext) {\n                case 'yml':\n                case 'yaml':\n                    return resolve(this.loadYaml(fixtureFile))\n\n                case 'js':\n                    return resolve(this.loadModule(fixtureFile))\n\n                case 'json':\n                    return resolve(this.loadJson(fixtureFile))\n\n                default:\n                    return resolve(this.loadText(fixtureFile))\n            }\n        })\n    }\n\n    /**\n     * Resets fixtures loader.\n     */\n    reset() {\n        this.featureUri = undefined\n    }\n}\n\n/**\n * Create a new isolated fixtures loader\n * @return {FixturesLoader}\n */\nexport default function (...args) {\n    return new FixturesLoader(...args)\n}\n\n/**\n * fixtures loader extension.\n * @type {FixturesLoader}\n */\nexport { FixturesLoader as Fixture }\n"],
  "mappings": "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",
  "names": ["fs", "yaml", "path", "fastGlob"]
}
