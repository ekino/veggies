{
  "version": 3,
  "sources": ["../../../../src/extensions/cli/cli.js"],
  "sourcesContent": ["'use strict'\n\n/**\n * The CLI helper used by the CLI extension.\n *\n * @module extensions/Cli/Cli\n */\n\nimport { spawn } from 'node:child_process'\nimport path from 'node:path'\n\n/**\n * Cli extension.\n *\n * @class\n */\nclass Cli {\n    constructor() {\n        /**\n         * The Current Working Directory.\n         *\n         * @type {string}\n         */\n        this.cwd = process.cwd()\n\n        /**\n         * An object containing environment variables to inject when running your command.\n         *\n         * @type {Object}\n         */\n        this.env = {}\n\n        /** @type {string} */\n        this.killSignal = null\n\n        /** @type {number} */\n        this.killDelay = 0\n\n        /**\n         * Latest command execution exit code.\n         *\n         * @type {number}\n         */\n        this.exitCode = null\n\n        /**\n         * The command's output.\n         *\n         * @type {string}\n         */\n        this.stdout = ''\n\n        /**\n         * The command's error output.\n         *\n         * @type {string}\n         */\n        this.stderr = ''\n    }\n\n    /**\n     * Sets the Current Working Directory for the command.\n     *\n     * @param {string} cwd - The new CWD\n     */\n    setCwd(cwd) {\n        if (cwd.indexOf('/') === 0) {\n            this.cwd = cwd\n        } else {\n            this.cwd = path.join(process.cwd(), cwd)\n        }\n    }\n\n    /**\n     * Returns Current Working Directory.\n     *\n     * @return {string}\n     */\n    getCwd() {\n        return this.cwd\n    }\n\n    /**\n     * Defines environment variables.\n     * Beware that all existing ones will be overridden!\n     *\n     * @param {Object} env - The environment variables object\n     */\n    setEnvironmentVariables(env) {\n        this.env = env\n    }\n\n    /**\n     * Defines a single environment variable.\n     *\n     * @param {string} name  - The environment variable name\n     * @param {string} value - The value associated to the variable\n     */\n    setEnvironmentVariable(name, value) {\n        this.env[name] = value\n    }\n\n    scheduleKillProcess(delay, signal) {\n        this.killDelay = delay\n        this.killSignal = signal\n    }\n\n    /**\n     * Returns latest command execution exit code.\n     *\n     * @return {number} The exit code\n     */\n    getExitCode() {\n        return this.exitCode\n    }\n\n    /**\n     * Returns captured output.\n     *\n     * @throws {TypeError} Argument `type` must be one of: 'stdout', 'stderr'\n     * @param {string} [type=stdout] - The standard stream type\n     * @returns {string} The captured output\n     */\n    getOutput(type = 'stdout') {\n        if (type === 'stdout') return this.stdout\n        else if (type === 'stderr') return this.stderr\n\n        throw new TypeError(`invalid output type '${type}', must be one of: 'stdout', 'stderr'`)\n    }\n\n    /**\n     * Resets the Cli helper:\n     * - CWD is reset to current process CWD\n     * - environment variables\n     * - killDelay & killSignal are disabled\n     * - exitCode is set to null\n     * - stdout is set to an empty string\n     * - stderr is set to an empty string\n     */\n    reset() {\n        this.cwd = process.cwd()\n        this.env = {}\n        this.killDelay = 0\n        this.killSignal = null\n        this.exitCode = null\n        this.stdout = ''\n        this.stderr = ''\n    }\n\n    /**\n     * Run given command.\n     *\n     * @param {string} rawCommand - The command string\n     * @returns {Promise.<boolean>} The resulting `Promise`\n     */\n    run(rawCommand) {\n        const [command, ...args] = rawCommand.split(' ')\n\n        return new Promise((resolve, reject) => {\n            // we inherit from current env vars\n            // otherwise, we can have problem with PATH\n            const cmd = spawn(command, args, {\n                cwd: this.cwd,\n                env: { ...process.env, ...this.env },\n            })\n\n            let killer\n            let killed = false\n            if (this.killSignal !== null) {\n                killer = setTimeout(() => {\n                    cmd.kill(this.killSignal)\n                    killed = true\n                }, this.killDelay)\n            }\n\n            const cmdStdout = []\n            const cmdStderr = []\n\n            cmd.stdout.on('data', cmdStdout.push.bind(cmdStdout))\n            cmd.stderr.on('data', cmdStderr.push.bind(cmdStderr))\n\n            cmd.on('close', (code, signal) => {\n                if (killer !== undefined) {\n                    if (killed !== true) {\n                        clearTimeout(killer)\n\n                        return reject(\n                            new Error(\n                                `process.kill('${this.killSignal}') scheduled but process exited (delay: ${this.killDelay}ms)`,\n                            ),\n                        )\n                    }\n                }\n\n                this.exitCode = code\n\n                this.stdout = Buffer.concat(cmdStdout).toString()\n                this.stderr = Buffer.concat(cmdStderr).toString()\n\n                resolve(true)\n            })\n        })\n    }\n}\n\n/**\n * Create a new isolated Cli\n * @return {Cli}\n */\nexport default function (...args) {\n    return new Cli(...args)\n}\n\n/**\n * Cli extension.\n * @type {Cli}\n */\nexport { Cli }\n"],
  "mappings": "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",
  "names": ["path"]
}
