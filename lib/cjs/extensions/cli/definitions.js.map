{
  "version": 3,
  "sources": ["../../../../src/extensions/cli/definitions.js"],
  "sourcesContent": ["'use strict'\n\nimport { Given, Then, When } from '@cucumber/cucumber'\nimport { expect } from 'chai'\n\nexport const install = () => {\n    Given(/^(?:I )?set (?:working directory|cwd) to (.+)$/, function (cwd) {\n        this.cli.setCwd(cwd)\n    })\n\n    Given(\n        /^(?:I )?set ([^ ]+) (?:env|environment) (?:var|variable) to (.+)$/,\n        function (name, value) {\n            this.cli.setEnvironmentVariable(name, value)\n        },\n    )\n\n    Given(/^(?:I )?set (?:env|environment) (?:vars|variables)$/, function (step) {\n        this.cli.setEnvironmentVariables(step.rowsHash())\n    })\n\n    Given(/^(?:I )?kill the process with ([^ ]+) in (\\d+)(ms|s)/, function (signal, _delay, unit) {\n        let delay = Number(_delay)\n        if (unit === 's') {\n            delay = delay * 1000\n        }\n\n        this.cli.scheduleKillProcess(delay, signal)\n    })\n\n    When(/^(?:I )?run command (.+)$/, function (command) {\n        return this.cli.run(command)\n    })\n\n    When(/^(?:I )?dump (stderr|stdout)$/, function (type) {\n        const output = this.cli.getOutput(type)\n        console.log(output)\n    })\n\n    Then(/^(?:the )?(?:command )?exit code should be (\\d+)$/, function (expectedExitCode) {\n        const exitCode = this.cli.getExitCode()\n\n        expect(\n            exitCode,\n            `The command exit code doesn't match expected ${expectedExitCode}, found: ${exitCode}`,\n        ).to.equal(Number(expectedExitCode))\n    })\n\n    Then(/^(stderr|stdout) should be empty$/, function (type) {\n        const output = this.cli.getOutput(type)\n\n        expect(output).to.be.empty\n    })\n\n    Then(/^(stderr|stdout) should contain (.+)$/, function (type, expected) {\n        const output = this.cli.getOutput(type)\n\n        expect(output).to.contain(expected)\n    })\n\n    Then(/^(stderr|stdout) should not contain (.+)$/, function (type, expected) {\n        const output = this.cli.getOutput(type)\n\n        expect(output).to.not.contain(expected)\n    })\n\n    Then(/^(stderr|stdout) should match (.+)$/, function (type, regex) {\n        const output = this.cli.getOutput(type)\n\n        expect(output).to.match(new RegExp(regex, 'gim'))\n    })\n\n    Then(/^(stderr|stdout) should not match (.+)$/, function (type, regex) {\n        const output = this.cli.getOutput(type)\n\n        expect(output).to.not.match(new RegExp(regex, 'gim'))\n    })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,sBAAkC;AAClC,kBAAuB;AAEhB,MAAM,UAAU,MAAM;AACzB,6BAAM,kDAAkD,SAAU,KAAK;AACnE,SAAK,IAAI,OAAO,GAAG;AAAA,EACvB,CAAC;AAED;AAAA,IACI;AAAA,IACA,SAAU,MAAM,OAAO;AACnB,WAAK,IAAI,uBAAuB,MAAM,KAAK;AAAA,IAC/C;AAAA,EACJ;AAEA,6BAAM,uDAAuD,SAAU,MAAM;AACzE,SAAK,IAAI,wBAAwB,KAAK,SAAS,CAAC;AAAA,EACpD,CAAC;AAED,6BAAM,wDAAwD,SAAU,QAAQ,QAAQ,MAAM;AAC1F,QAAI,QAAQ,OAAO,MAAM;AACzB,QAAI,SAAS,KAAK;AACd,cAAQ,QAAQ;AAAA,IACpB;AAEA,SAAK,IAAI,oBAAoB,OAAO,MAAM;AAAA,EAC9C,CAAC;AAED,4BAAK,6BAA6B,SAAU,SAAS;AACjD,WAAO,KAAK,IAAI,IAAI,OAAO;AAAA,EAC/B,CAAC;AAED,4BAAK,iCAAiC,SAAU,MAAM;AAClD,UAAM,SAAS,KAAK,IAAI,UAAU,IAAI;AACtC,YAAQ,IAAI,MAAM;AAAA,EACtB,CAAC;AAED,4BAAK,qDAAqD,SAAU,kBAAkB;AAClF,UAAM,WAAW,KAAK,IAAI,YAAY;AAEtC;AAAA,MACI;AAAA,MACA,gDAAgD,gBAAgB,YAAY,QAAQ;AAAA,IACxF,EAAE,GAAG,MAAM,OAAO,gBAAgB,CAAC;AAAA,EACvC,CAAC;AAED,4BAAK,qCAAqC,SAAU,MAAM;AACtD,UAAM,SAAS,KAAK,IAAI,UAAU,IAAI;AAEtC,4BAAO,MAAM,EAAE,GAAG,GAAG;AAAA,EACzB,CAAC;AAED,4BAAK,yCAAyC,SAAU,MAAM,UAAU;AACpE,UAAM,SAAS,KAAK,IAAI,UAAU,IAAI;AAEtC,4BAAO,MAAM,EAAE,GAAG,QAAQ,QAAQ;AAAA,EACtC,CAAC;AAED,4BAAK,6CAA6C,SAAU,MAAM,UAAU;AACxE,UAAM,SAAS,KAAK,IAAI,UAAU,IAAI;AAEtC,4BAAO,MAAM,EAAE,GAAG,IAAI,QAAQ,QAAQ;AAAA,EAC1C,CAAC;AAED,4BAAK,uCAAuC,SAAU,MAAM,OAAO;AAC/D,UAAM,SAAS,KAAK,IAAI,UAAU,IAAI;AAEtC,4BAAO,MAAM,EAAE,GAAG,MAAM,IAAI,OAAO,OAAO,KAAK,CAAC;AAAA,EACpD,CAAC;AAED,4BAAK,2CAA2C,SAAU,MAAM,OAAO;AACnE,UAAM,SAAS,KAAK,IAAI,UAAU,IAAI;AAEtC,4BAAO,MAAM,EAAE,GAAG,IAAI,MAAM,IAAI,OAAO,OAAO,KAAK,CAAC;AAAA,EACxD,CAAC;AACL;",
  "names": []
}
