{
  "version": 3,
  "sources": ["../../../../src/extensions/http_api/client.js"],
  "sourcesContent": ["'use strict'\n\n/**\n * The http client used by the http API extension.\n *\n * @module extensions/httpApi/client\n */\n\nimport requestLib from 'request'\nimport { Cookie } from 'tough-cookie'\nimport { isPlainObject, isString } from '../../utils/index.js'\n\nconst request = requestLib.defaults({ json: true })\nconst BODY_TYPE_JSON = 'json'\nconst BODY_TYPE_FORM = 'form'\nconst BODY_TYPE_MULTIPART = 'form-data'\n\nconst verbsAcceptingBody = ['POST', 'PUT', 'DELETE', 'PATCH']\n\n/**\n * Http Api Client extension.\n *\n * @class\n */\nclass HttpApiClient {\n    constructor() {\n        // REQUEST INFORMATION\n        this.body = null\n        this.bodyType = null\n        this.headers = null\n        this.query = null\n        this.cookies = []\n        this.cookieJar = null\n        this.followRedirect = true\n\n        // RESPONSE INFORMATION\n        this.response = null\n        this.responseCookies = {}\n    }\n\n    /**\n     * Resets the client.\n     */\n    reset() {\n        this.body = null\n        this.bodyType = null\n        this.headers = null\n        this.query = null\n\n        this.cookies = []\n        this.cookieJar = null\n        this.followRedirect = true\n\n        this.response = null\n        this.responseCookies = {}\n    }\n\n    /**\n     * Sets request json body.\n     *\n     * @param {Object} payload\n     */\n    setJsonBody(payload) {\n        this.bodyType = BODY_TYPE_JSON\n        this.body = payload\n    }\n\n    /**\n     * Sets request form body.\n     *\n     * @param {Object} payload\n     */\n    setFormBody(payload) {\n        this.bodyType = BODY_TYPE_FORM\n        this.body = payload\n    }\n\n    /**\n     * Sets Follow Redirect option.\n     *\n     */\n    setFollowRedirect(isEnabled) {\n        this.followRedirect = isEnabled\n    }\n\n    /**\n     * Sets request body for multipart form data\n     *\n     * @param {Object} payload\n     */\n    setMultipartBody(payload) {\n        this.bodyType = BODY_TYPE_MULTIPART\n        this.body = payload\n    }\n\n    /**\n     * Clears current request body\n     */\n    clearBody() {\n        this.body = null\n        this.bodyType = null\n    }\n\n    /**\n     * Sets request query parameters.\n     *\n     * @param {Object} query\n     */\n    setQuery(query) {\n        this.query = query\n    }\n\n    /**\n     * Sets request headers.\n     *\n     * @param {Object} headers\n     */\n    setHeaders(headers) {\n        this.headers = headers\n    }\n\n    /**\n     * Sets a single request header.\n     *\n     * @param {string} key\n     * @param {string} value\n     */\n    setHeader(key, value) {\n        this.headers = this.headers || {}\n        this.headers[key] = value\n    }\n\n    /**\n     * Clears current request headers.\n     */\n    clearHeaders() {\n        this.headers = null\n    }\n\n    /**\n     * Enables cookie jar.\n     */\n    enableCookies() {\n        if (this.cookieJar !== null) return\n\n        this.cookieJar = request.jar()\n        this.cookieJar._jar.rejectPublicSuffixes = false\n    }\n\n    /**\n     * Disables cookie jar.\n     */\n    disableCookies() {\n        this.cookieJar = null\n    }\n\n    /**\n     * Sets a cookie.\n     * It does not actually add the cookie to the cookie jar\n     * because setting the cookie requires the request url,\n     * which we only have when making the request.\n     *\n     * @param {string|Object} cookie - Cookie string or Object\n     */\n    setCookie(cookie) {\n        if (!isPlainObject(cookie) && !isString(cookie)) {\n            throw new TypeError(`\"cookie\" must be a string or a cookie object`)\n        }\n\n        this.enableCookies()\n        this.cookies.push(cookie)\n    }\n\n    /**\n     * Clears registered request cookies.\n     * Be aware that it does not clear existing response cookies.\n     */\n    clearRequestCookies() {\n        this.cookies = []\n    }\n\n    /**\n     * Retrieves a cookie by its key.\n     *\n     * @param {string} key - Cookie key\n     * @return {Object|null} The cookie object if any, or null\n     */\n    getCookie(key) {\n        if (this.responseCookies === null) return null\n        if (this.responseCookies[key] === undefined) return null\n\n        return this.responseCookies[key]\n    }\n\n    /**\n     * Returns current response cookies.\n     *\n     * @return {Object} current response cookies\n     */\n    getCookies() {\n        return this.responseCookies\n    }\n\n    /**\n     * Returns the latest collected response.\n     */\n    getResponse() {\n        return this.response\n    }\n\n    /**\n     * Performs a request using all previously defined paramaters:\n     * - headers\n     * - query\n     * - body\n     *\n     * @param {string} method    - The http verb\n     * @param {string} path      - The path\n     * @param {string} [baseUrl] - The base url\n     */\n    makeRequest(method, path, baseUrl) {\n        return new Promise((resolve, reject) => {\n            if (/https?:\\/\\//.test(path)) {\n                const url = new URL(path)\n                path = path.replace(url.origin, '')\n                baseUrl = url.origin\n            }\n\n            const options = {\n                baseUrl: baseUrl,\n                uri: path,\n                method,\n                qs: this.query || {},\n                headers: this.headers,\n                jar: this.cookieJar,\n                followRedirect: this.followRedirect,\n            }\n\n            const fullUri = `${baseUrl}${path}`\n\n            if (this.body !== null) {\n                if (!verbsAcceptingBody.includes(method)) {\n                    throw new Error(\n                        `You can only provide a body for ${verbsAcceptingBody.join(\n                            ', ',\n                        )} HTTP methods, found: ${method}`,\n                    )\n                }\n\n                if (this.bodyType === BODY_TYPE_JSON) {\n                    options.json = true\n                    options.body = this.body\n                } else if (this.bodyType === BODY_TYPE_FORM) {\n                    options.form = this.body\n                } else if (this.bodyType == BODY_TYPE_MULTIPART) {\n                    options.formData = this.body\n                }\n            }\n\n            if (this.cookieJar !== null) {\n                this.cookies.forEach((cookie) => {\n                    if (isPlainObject(cookie)) {\n                        this.cookieJar.setCookie(new Cookie(cookie), fullUri)\n                    } else if (isString(cookie)) {\n                        this.cookieJar.setCookie(cookie, fullUri)\n                    }\n                })\n            }\n\n            request(options, (_error, _response, _body) => {\n                if (_error) {\n                    console.error(_error, options)\n                    reject()\n                }\n\n                this.response = _response\n\n                if (this.cookieJar !== null) {\n                    this.responseCookies = {}\n                    this.cookieJar.getCookies(fullUri).forEach((cookie) => {\n                        this.responseCookies[cookie.key] = cookie\n                    })\n                }\n\n                resolve()\n            })\n        })\n    }\n}\n\n/**\n * Create a new isolated http api client\n * @return {HttpApiClient}\n */\nexport default function (...args) {\n    return new HttpApiClient(...args)\n}\n\n/**\n * Http api client extension.\n * @type {HttpApiClient}\n */\nexport { HttpApiClient }\n"],
  "mappings": "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",
  "names": ["requestLib"]
}
