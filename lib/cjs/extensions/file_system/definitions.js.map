{
  "version": 3,
  "sources": ["../../../../src/extensions/file_system/definitions.js"],
  "sourcesContent": ["'use strict'\n\nimport { Given, Then } from '@cucumber/cucumber'\nimport { expect } from 'chai'\n\nexport const install = () => {\n    /**\n     * Creating a directory.\n     */\n    Given(/^(?:I )?create directory (.+)$/, function (directory) {\n        return this.fileSystem.createDirectory(this.cli.getCwd(), directory)\n    })\n\n    /**\n     * Remove a file or directory.\n     */\n    Given(/^(?:I )?remove (?:file|directory) (.+)$/, function (fileOrDirectory) {\n        return this.fileSystem.remove(this.cli.getCwd(), fileOrDirectory)\n    })\n\n    /**\n     * Checking file/directory presence.\n     */\n    Then(/^(file|directory) (.+) should (not )?exist$/, function (type, file, flag) {\n        return this.fileSystem.getFileInfo(this.cli.getCwd(), file).then((info) => {\n            if (flag === 'not ') {\n                expect(info, `${type} '${file}' exists`).to.be.null\n            } else {\n                expect(info, `${type} '${file}' does not exist`).not.to.be.null\n                if (type === 'file') {\n                    expect(info.isFile(), `'${file}' is not a file`).to.be.true\n                } else {\n                    expect(info.isDirectory(), `'${file}' is not a directory`).to.be.true\n                }\n            }\n        })\n    })\n\n    /**\n     * Checking file content.\n     */\n    Then(\n        /^file (.+) content should (not )?(equal|contain|match) (.+)$/,\n        function (file, flag, comparator, expectedValue) {\n            return this.fileSystem\n                .getFileContent(this.cli.getCwd(), file)\n                .then((content) => {\n                    let expectFn = expect(\n                        content,\n                        `Expected file '${file}' to ${\n                            flag ? flag : ''\n                        }${comparator} '${expectedValue}', but found '${content}' which does${\n                            flag ? '' : ' not'\n                        }`,\n                    ).to\n                    if (flag != undefined) {\n                        expectFn = expectFn.not\n                    }\n\n                    expectFn[comparator](\n                        comparator === 'match' ? new RegExp(expectedValue) : expectedValue,\n                    )\n                })\n                .catch((err) => {\n                    if (err.code === 'ENOENT')\n                        return expect.fail('', '', `File '${file}' should exist`)\n\n                    return Promise.reject(err)\n                })\n        },\n    )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,sBAA4B;AAC5B,kBAAuB;AAEhB,MAAM,UAAU,MAAM;AAIzB,6BAAM,kCAAkC,SAAU,WAAW;AACzD,WAAO,KAAK,WAAW,gBAAgB,KAAK,IAAI,OAAO,GAAG,SAAS;AAAA,EACvE,CAAC;AAKD,6BAAM,2CAA2C,SAAU,iBAAiB;AACxE,WAAO,KAAK,WAAW,OAAO,KAAK,IAAI,OAAO,GAAG,eAAe;AAAA,EACpE,CAAC;AAKD,4BAAK,+CAA+C,SAAU,MAAM,MAAM,MAAM;AAC5E,WAAO,KAAK,WAAW,YAAY,KAAK,IAAI,OAAO,GAAG,IAAI,EAAE,KAAK,CAAC,SAAS;AACvE,UAAI,SAAS,QAAQ;AACjB,gCAAO,MAAM,GAAG,IAAI,KAAK,IAAI,UAAU,EAAE,GAAG,GAAG;AAAA,MACnD,OAAO;AACH,gCAAO,MAAM,GAAG,IAAI,KAAK,IAAI,kBAAkB,EAAE,IAAI,GAAG,GAAG;AAC3D,YAAI,SAAS,QAAQ;AACjB,kCAAO,KAAK,OAAO,GAAG,IAAI,IAAI,iBAAiB,EAAE,GAAG,GAAG;AAAA,QAC3D,OAAO;AACH,kCAAO,KAAK,YAAY,GAAG,IAAI,IAAI,sBAAsB,EAAE,GAAG,GAAG;AAAA,QACrE;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AAKD;AAAA,IACI;AAAA,IACA,SAAU,MAAM,MAAM,YAAY,eAAe;AAC7C,aAAO,KAAK,WACP,eAAe,KAAK,IAAI,OAAO,GAAG,IAAI,EACtC,KAAK,CAAC,YAAY;AACf,YAAI,eAAW;AAAA,UACX;AAAA,UACA,kBAAkB,IAAI,QAClB,OAAO,OAAO,EAClB,GAAG,UAAU,KAAK,aAAa,iBAAiB,OAAO,eACnD,OAAO,KAAK,MAChB;AAAA,QACJ,EAAE;AACF,YAAI,QAAQ,QAAW;AACnB,qBAAW,SAAS;AAAA,QACxB;AAEA,iBAAS,UAAU;AAAA,UACf,eAAe,UAAU,IAAI,OAAO,aAAa,IAAI;AAAA,QACzD;AAAA,MACJ,CAAC,EACA,MAAM,CAAC,QAAQ;AACZ,YAAI,IAAI,SAAS;AACb,iBAAO,mBAAO,KAAK,IAAI,IAAI,SAAS,IAAI,gBAAgB;AAE5D,eAAO,QAAQ,OAAO,GAAG;AAAA,MAC7B,CAAC;AAAA,IACT;AAAA,EACJ;AACJ;",
  "names": []
}
