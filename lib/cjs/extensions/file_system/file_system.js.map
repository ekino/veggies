{
  "version": 3,
  "sources": ["../../../../src/extensions/file_system/file_system.js"],
  "sourcesContent": ["'use strict'\n\n/**\n * The FileSystem helper used by the FileSystem extension.\n *\n * @module extensions/FileSystem/FileSystem\n */\n\nimport path from 'node:path'\nimport fs from 'node:fs'\n\n/**\n * Loads file content.\n *\n * @param {string} cwd               - Current Working Directory\n * @param {string} file              - File name\n * @param {string} [encoding='utf8'] - Content encoding\n * @return {Promise.<string>} File content\n */\nexport const getFileContent = (cwd, file, encoding = 'utf8') =>\n    new Promise((resolve, reject) => {\n        fs.readFile(path.join(cwd, file), (err, data) => {\n            if (err) return reject(err)\n            resolve(data.toString(encoding))\n        })\n    })\n\n/**\n * Gets info about file/directory.\n *\n * @param {string} cwd  - Current Working Directory\n * @param {string} file - File name\n * @return {Promise.<fs.Stat|null>} File/directory info or null if file/directory does not exist\n */\nexport const getFileInfo = (cwd, file) =>\n    new Promise((resolve, reject) => {\n        fs.stat(path.join(cwd, file), (err, stat) => {\n            if (err) {\n                if (err.code === 'ENOENT') return resolve(null)\n                return reject(err)\n            }\n\n            resolve(stat)\n        })\n    })\n\n/**\n * Creates a directory.\n *\n * @param {string} cwd       - Current Working Directory\n * @param {string} directory - Directory name\n * @return {Promise.<boolean>}\n */\nexport const createDirectory = (cwd, directory) =>\n    fs.mkdirSync(path.join(cwd, directory), { recursive: true })\n\n/**\n * Removes a file or directory.\n *\n * @param {string} cwd             - Current Working Directory\n * @param {string} fileOrDirectory - File or directory name\n * @return {Promise.<boolean>}\n */\nexport const remove = (cwd, fileOrDirectory) =>\n    fs.rmSync(path.join(cwd, fileOrDirectory), { recursive: true, force: true })\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,uBAAiB;AACjB,qBAAe;AAUR,MAAM,iBAAiB,CAAC,KAAK,MAAM,WAAW,WACjD,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC7B,iBAAAA,QAAG,SAAS,iBAAAC,QAAK,KAAK,KAAK,IAAI,GAAG,CAAC,KAAK,SAAS;AAC7C,QAAI,IAAK,QAAO,OAAO,GAAG;AAC1B,YAAQ,KAAK,SAAS,QAAQ,CAAC;AAAA,EACnC,CAAC;AACL,CAAC;AASE,MAAM,cAAc,CAAC,KAAK,SAC7B,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC7B,iBAAAD,QAAG,KAAK,iBAAAC,QAAK,KAAK,KAAK,IAAI,GAAG,CAAC,KAAK,SAAS;AACzC,QAAI,KAAK;AACL,UAAI,IAAI,SAAS,SAAU,QAAO,QAAQ,IAAI;AAC9C,aAAO,OAAO,GAAG;AAAA,IACrB;AAEA,YAAQ,IAAI;AAAA,EAChB,CAAC;AACL,CAAC;AASE,MAAM,kBAAkB,CAAC,KAAK,cACjC,eAAAD,QAAG,UAAU,iBAAAC,QAAK,KAAK,KAAK,SAAS,GAAG,EAAE,WAAW,KAAK,CAAC;AASxD,MAAM,SAAS,CAAC,KAAK,oBACxB,eAAAD,QAAG,OAAO,iBAAAC,QAAK,KAAK,KAAK,eAAe,GAAG,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;",
  "names": ["fs", "path"]
}
