{
  "version": 3,
  "sources": ["../../../../src/extensions/snapshot/definitions.js"],
  "sourcesContent": ["'use strict'\n\nimport { Then } from '@cucumber/cucumber'\n\nexport const install = () => {\n    /**\n     * Checking if an http response body match a snapshot\n     */\n    Then(/^response body should match snapshot$/, function () {\n        this.snapshot.expectToMatch(this.httpApiClient.getResponse().body)\n    })\n\n    /**\n     * Checking if an http response body match a snapshot\n     * Allow to omit field by checking their type or if they contain a value\n     */\n    Then(/^response json body should match snapshot$/, function (table) {\n        let spec = []\n        if (table) {\n            spec = table.hashes().map((fieldSpec) => ({\n                ...fieldSpec,\n                value: this.state.populate(fieldSpec.value),\n            }))\n        }\n\n        this.snapshot.expectToMatchJson(this.httpApiClient.getResponse().body, spec)\n    })\n\n    /**\n     * Checking a cli stdout or stderr match snapshot\n     */\n    Then(/^(stderr|stdout) output should match snapshot$/, function (type) {\n        this.snapshot.expectToMatch(this.cli.getOutput(type))\n    })\n\n    /**\n     * Checking a cli stdout or stderr match snapshot\n     * Allow to omit field by checking their type or if they contain a value\n     */\n    Then(/^(stderr|stdout) json output should match snapshot$/, function (type, table) {\n        let spec = []\n        if (table) {\n            spec = table.hashes().map((fieldSpec) => ({\n                ...fieldSpec,\n                value: this.state.populate(fieldSpec.value),\n            }))\n        }\n\n        const output = JSON.parse(this.cli.getOutput(type))\n        this.snapshot.expectToMatchJson(output, spec)\n    })\n\n    /**\n     * Checking that a file content matches the snapshot\n     * Allow to omit field by checking their type or if they contain a value\n     */\n    Then(/^file (.+) should match snapshot$/, function (file) {\n        return this.fileSystem.getFileContent(this.cli.getCwd(), file).then((content) => {\n            this.snapshot.expectToMatch(content)\n        })\n    })\n\n    /**\n     * Checking that a file content matches the snapshot\n     */\n    Then(/^json file (.+) content should match snapshot$/, function (file, table) {\n        let spec = []\n        if (table) {\n            spec = table.hashes().map((fieldSpec) => ({\n                ...fieldSpec,\n                value: this.state.populate(fieldSpec.value),\n            }))\n        }\n\n        return this.fileSystem.getFileContent(this.cli.getCwd(), file).then((content) => {\n            const parsedContent = JSON.parse(content)\n            this.snapshot.expectToMatchJson(parsedContent, spec)\n        })\n    })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,sBAAqB;AAEd,MAAM,UAAU,MAAM;AAIzB,4BAAK,yCAAyC,WAAY;AACtD,SAAK,SAAS,cAAc,KAAK,cAAc,YAAY,EAAE,IAAI;AAAA,EACrE,CAAC;AAMD,4BAAK,8CAA8C,SAAU,OAAO;AAChE,QAAI,OAAO,CAAC;AACZ,QAAI,OAAO;AACP,aAAO,MAAM,OAAO,EAAE,IAAI,CAAC,eAAe;AAAA,QACtC,GAAG;AAAA,QACH,OAAO,KAAK,MAAM,SAAS,UAAU,KAAK;AAAA,MAC9C,EAAE;AAAA,IACN;AAEA,SAAK,SAAS,kBAAkB,KAAK,cAAc,YAAY,EAAE,MAAM,IAAI;AAAA,EAC/E,CAAC;AAKD,4BAAK,kDAAkD,SAAU,MAAM;AACnE,SAAK,SAAS,cAAc,KAAK,IAAI,UAAU,IAAI,CAAC;AAAA,EACxD,CAAC;AAMD,4BAAK,uDAAuD,SAAU,MAAM,OAAO;AAC/E,QAAI,OAAO,CAAC;AACZ,QAAI,OAAO;AACP,aAAO,MAAM,OAAO,EAAE,IAAI,CAAC,eAAe;AAAA,QACtC,GAAG;AAAA,QACH,OAAO,KAAK,MAAM,SAAS,UAAU,KAAK;AAAA,MAC9C,EAAE;AAAA,IACN;AAEA,UAAM,SAAS,KAAK,MAAM,KAAK,IAAI,UAAU,IAAI,CAAC;AAClD,SAAK,SAAS,kBAAkB,QAAQ,IAAI;AAAA,EAChD,CAAC;AAMD,4BAAK,qCAAqC,SAAU,MAAM;AACtD,WAAO,KAAK,WAAW,eAAe,KAAK,IAAI,OAAO,GAAG,IAAI,EAAE,KAAK,CAAC,YAAY;AAC7E,WAAK,SAAS,cAAc,OAAO;AAAA,IACvC,CAAC;AAAA,EACL,CAAC;AAKD,4BAAK,kDAAkD,SAAU,MAAM,OAAO;AAC1E,QAAI,OAAO,CAAC;AACZ,QAAI,OAAO;AACP,aAAO,MAAM,OAAO,EAAE,IAAI,CAAC,eAAe;AAAA,QACtC,GAAG;AAAA,QACH,OAAO,KAAK,MAAM,SAAS,UAAU,KAAK;AAAA,MAC9C,EAAE;AAAA,IACN;AAEA,WAAO,KAAK,WAAW,eAAe,KAAK,IAAI,OAAO,GAAG,IAAI,EAAE,KAAK,CAAC,YAAY;AAC7E,YAAM,gBAAgB,KAAK,MAAM,OAAO;AACxC,WAAK,SAAS,kBAAkB,eAAe,IAAI;AAAA,IACvD,CAAC;AAAA,EACL,CAAC;AACL;",
  "names": []
}
