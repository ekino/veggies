{
  "version": 3,
  "sources": ["../../../../src/extensions/snapshot/snapshot.js"],
  "sourcesContent": ["'use strict'\n\n/**\n * @module extensions/snapshot/snapshot\n */\n\nimport path from 'node:path'\nimport { diff as jestDiff } from 'jest-diff'\nimport naturalCompare from 'natural-compare'\nimport chalk from 'chalk'\n\nimport * as fileSystem from './fs.js'\n\nconst EXPECTED_COLOR = chalk.green\nconst RECEIVED_COLOR = chalk.red\nconst JEST_NO_DIFF_MESSAGE = 'Compared values have no visual difference.'\n\nexport const scenarioRegex = /^[\\s]*Scenario:[\\s]*(.*[^\\s])[\\s]*$/\n\n/**\n * Extract scenarios from a feature file\n * @param {string} file - Feature file path\n * @return {Array<string>} - Scenarios names\n */\nexport const extractScenarios = (file) => {\n    if (!file) {\n        throw new TypeError(`Invalid feature file ${file}`)\n    }\n\n    const content = fileSystem.getFileContent(file)\n    const linesContent = content.split('\\n')\n\n    return linesContent\n        .map((lineContent, idx) => {\n            const line = idx + 1\n            const scenarioInfos = scenarioRegex.exec(lineContent)\n            if (scenarioInfos) {\n                return { line, name: scenarioInfos[1] }\n            }\n            return undefined\n        })\n        .filter((item) => !!item)\n}\n\n/**\n * Create snapshots prefix that will be used for each snapshot step of a scenario\n * For example if the scenario name is 'Scenario 1', then prefix will be 'Scenario 1 1'\n * If then we have in the same file another scenario named 'Scenario 1', it's prefix will be 'Scenario 1 2' to avoid\n * naming collisions\n *\n * Result will follow the pattern :\n * {\n *   scenario_line: {\n *      name: scenario_name,\n *      line: scenario_line,\n *      prefix: scenario_snapshots_prefix\n *   },\n *   scenario2_line: {\n *      name: scenario2_name,\n *      line: scenario2_line,\n *      prefix: scenario2_snapshots_prefix\n *   }\n *   ...\n * }\n *\n * @param {Array<string>} scenarios - Scenarios names\n * @return {Object} - Read above for result format\n */\nexport const prefixSnapshots = (scenarios) => {\n    if (!scenarios) {\n        throw new Error(`Scenarios are required to prefix snapshots`)\n    }\n\n    const nameCount = new Map()\n    return scenarios.reduce((acc, scenario) => {\n        const count = nameCount.get(scenario.name) || 0\n        nameCount.set(scenario.name, count + 1)\n\n        const prefix = `${scenario.name} ${count + 1}`\n\n        acc[scenario.line] = { name: scenario.name, line: scenario.line, prefix: prefix }\n        return acc\n    }, {})\n}\n\n/**\n * Read a snapshot file and parse it.\n * For each feature file, we have one snapshot file\n * @param {string} file - snapshot file path\n * @return {Object} - Return follows the pattern : {snapshot_name: snapshot_content}\n */\nexport const readSnapshotFile = (file) => {\n    if (!file) {\n        throw new Error(`Missing snapshot file ${file} to read snapshots`)\n    }\n\n    const info = fileSystem.getFileInfo(file)\n    if (!info) return {}\n\n    const content = fileSystem.getFileContent(file)\n\n    return parseSnapshotFile(content)\n}\n\n/**\n * Format and write a snapshot file content\n * @param {string} file - file path\n * @param {Object} content - snapshot file content following the pattern : {snapshot_name: snapshot_content}\n */\nexport const writeSnapshotFile = (file, content) => {\n    const serializedContent = formatSnapshotFile(content)\n    return fileSystem.writeFileContent(file, serializedContent)\n}\n\n/**\n * Get snapshot file path base on feature file path\n * @param {string} featureFile - Feature file path\n * @param {Object} opts\n * @param {Object} [opts.snaphotsDirname = '__snapshots__'] - Snapshots dirname\n * @param {Object} [opts.snapshotsFileExtension = 'snap'] - Snapshots files extension\n */\nexport const snapshotsPath = (featureFile, opts) => {\n    const dirname = opts.snaphotsDirname || '__snapshots__'\n    const dir = path.join(path.dirname(featureFile), dirname)\n    const filename = `${path.basename(featureFile)}.${opts.snapshotsFileExtension || 'snap'}`\n\n    return path.join(dir, filename)\n}\n\n/**\n * Compute diff between two contents.\n * If no diff, it returns null\n * @param {string} snapshot - snapshot content\n * @param {string} expected - expected content\n * @returns {string} Diff message\n */\nexport const diff = (snapshot, expected) => {\n    let diffMessage = jestDiff(snapshot, expected, {\n        expand: false,\n        colors: true,\n        //contextLines: -1, // Forces to use default from Jest\n        aAnnotation: 'Snapshot',\n        bAnnotation: 'Received',\n    })\n\n    diffMessage =\n        diffMessage ||\n        `${EXPECTED_COLOR('- ' + (expected || ''))} \\n ${RECEIVED_COLOR('+ ' + snapshot)}`\n    if (diffMessage.indexOf(JEST_NO_DIFF_MESSAGE) !== -1) return null\n    return `\\n${diffMessage}`\n}\n\n/**\n * Add backticks to wrap snapshot content and replace backticks\n * @param {string} str - snapshot content\n * @return {string} wrapped content\n */\nexport const wrapWithBacktick = (str) => {\n    return '`' + str.replace(/`|\\\\|\\${/g, '\\\\$&') + '`'\n}\n\n/**\n * Normalize new lines to be \\n only\n * @param {string} string - Content to normalize\n */\nexport const normalizeNewlines = (string) => {\n    return string.replace(/\\r\\n|\\r/g, '\\n')\n}\n\n/**\n * For a snapshot file by add backticks and format it as js files with keys\n * @param {object} content - snapshots content\n * @return {string} formated snapshot file\n */\nexport const formatSnapshotFile = (content) => {\n    const snapshots = Object.keys(content)\n        .sort(naturalCompare)\n        .map(\n            (key) =>\n                'exports[' +\n                wrapWithBacktick(key) +\n                '] = ' +\n                wrapWithBacktick(normalizeNewlines(content[key])) +\n                ';',\n        )\n    return '\\n\\n' + snapshots.join('\\n\\n') + '\\n'\n}\n\n/**\n * Extract keys / values from snapshot file\n * @param {string} content - Snapshot file content\n * @return {Object} - should follow the pattern {snapshot_name: snapshot_content}\n */\nexport const parseSnapshotFile = (content) => {\n    const data = {}\n    const populate = new Function('exports', content)\n    populate(data)\n\n    return data\n}\n"],
  "mappings": "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",
  "names": ["chalk", "path", "jestDiff", "naturalCompare"]
}
