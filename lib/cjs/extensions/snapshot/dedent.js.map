{
  "version": 3,
  "sources": ["../../../../src/extensions/snapshot/dedent.js"],
  "sourcesContent": ["'use strict'\n\n/**\n * @module extensions/snapshot/dedent\n */\n\n/**\n * Extract spaces length\n * @param {string} text\n * @returns {number} length tab and space before first char\n */\nconst getSpacesLength = (text) => {\n    let length = 0\n\n    while (length < text.length) {\n        const char = text[length]\n        if (char !== ' ' && char !== '\\t') break\n        length += 1\n    }\n\n    return length\n}\n\n/**\n * Used to remove indentation from a text. Usefull with multine string in backticks.\n *\n * Two way to use it : `\n *     My text\n *       Another line\n *     Another line again\n * `\n * the result text will be :\n * \"My text\n *   Another line\n * Another line again\"\n *\n * In this case, alignment is done on the length of the first character that is not a space or a tab of all lines\n *\n * Or\n *\n * Another way : `\n *     \"\"\"\n *       My text\n *         Another line\n *      Another line again\n *     \"\"\"\n * `\n * the result text will be :\n * \"  My text\n *      Another line\n *  Another line again\"\n *\n *  In this case, alignment is done on the spaces or tab before \"\"\"\n *\n * Warning : First line and last line will always be ignored\n *\n * @param {string} text\n * @return {string}\n */\nconst dedent = (text) => {\n    if (typeof text !== 'string') text = text[0]\n\n    let lines = text.split('\\n')\n    if (lines.length < 3) return text\n\n    lines = lines.slice(1, lines.length - 1)\n\n    let skipLength = getSpacesLength(lines[0])\n\n    if (\n        lines[0].substr(skipLength, 3) === '\"\"\"' &&\n        lines[lines.length - 1].substr(skipLength, 3) === '\"\"\"'\n    ) {\n        lines = lines.slice(1, lines.length - 1)\n    } else {\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i]\n            skipLength = Math.min(skipLength, getSpacesLength(line))\n        }\n    }\n\n    const resultLines = []\n    for (let i = 0; i < lines.length; i++) {\n        resultLines.push(lines[i].substring(skipLength))\n    }\n\n    return resultLines.join('\\n')\n}\n\nexport default dedent\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,MAAM,kBAAkB,CAAC,SAAS;AAC9B,MAAI,SAAS;AAEb,SAAO,SAAS,KAAK,QAAQ;AACzB,UAAM,OAAO,KAAK,MAAM;AACxB,QAAI,SAAS,OAAO,SAAS,IAAM;AACnC,cAAU;AAAA,EACd;AAEA,SAAO;AACX;AAsCA,MAAM,SAAS,CAAC,SAAS;AACrB,MAAI,OAAO,SAAS,SAAU,QAAO,KAAK,CAAC;AAE3C,MAAI,QAAQ,KAAK,MAAM,IAAI;AAC3B,MAAI,MAAM,SAAS,EAAG,QAAO;AAE7B,UAAQ,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC;AAEvC,MAAI,aAAa,gBAAgB,MAAM,CAAC,CAAC;AAEzC,MACI,MAAM,CAAC,EAAE,OAAO,YAAY,CAAC,MAAM,SACnC,MAAM,MAAM,SAAS,CAAC,EAAE,OAAO,YAAY,CAAC,MAAM,OACpD;AACE,YAAQ,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC;AAAA,EAC3C,OAAO;AACH,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,YAAM,OAAO,MAAM,CAAC;AACpB,mBAAa,KAAK,IAAI,YAAY,gBAAgB,IAAI,CAAC;AAAA,IAC3D;AAAA,EACJ;AAEA,QAAM,cAAc,CAAC;AACrB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,gBAAY,KAAK,MAAM,CAAC,EAAE,UAAU,UAAU,CAAC;AAAA,EACnD;AAEA,SAAO,YAAY,KAAK,IAAI;AAChC;AAEA,IAAO,iBAAQ;",
  "names": []
}
